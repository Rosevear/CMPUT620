%SHOW
#show board/3.
#show move/4.
#show unboard/3.
#show load/3.
%#show at/3.
%#show in/3.
%#show moving/3.
#show full/2.

%The total amount of cars that can fit in the ferry
#const n=2.

%Specify the numbers used by the load predicate based on the total number of cars allowed in the ferry
num(0..n).

%Specify the number of time steps in which we would like the problem to be solved
time(0..steps).

%Assume that the ferry always starts off empty in each problem instance
load(ferry, 0, 0).

%ACTIONS
%If the ferry and car are at the same location, and the ferry is not full, the car may board the ferry
{board(Car,Loc,T)} :- car(Car), location(Loc), time(T), not full(ferry, T), at(Car,Loc,T),
	at(ferry,Loc,T), not moving(ferry,Loc,T), not goal(T).

{unboard(Car,Loc,T)} :- car(Car), location(Loc), time(T), in(ferry,Car,T),
	at(ferry,Loc,T), not moving(ferry,Loc,T), not goal(T).

{move(ferry,From,To,T)} :- car(Car),location(From), time(T), location(To),
	at(ferry,From,T), From != To, not goal(T).


%EFFECTS
%If a car unboards at a location, it is now at that location
at(Car,Loc,T+1):- car(Car), location(Loc), time(T), unboard(Car,Loc,T).

%If a car boards the ferry at time T, it is in the ferry at time T + 1
in(ferry,Car,T+1):-  car(Car), location(Loc), time(T), at(ferry,Loc,T), board(Car,Loc,T).

%If a ferry moves from a location at time T, it is at its destination at the next time step
at(ferry,To,T+1):- location(To), location(From), time(T), at(ferry,From,T), move(ferry,From,To,T).

%If there are 2 cars in the ferry at the same time, then it is full
full(ferry,T1) :- time(T1), time(T2), T1 == T2, car(X), car(Y), X!=Y, in(ferry,X,T1), in(ferry,Y,T2).

%If two cars board the ferry at time t, the number of cars in the ferry increments by 2
load(ferry,N+2,T+1) :- 2{car(X) : car(X), location(Loc), board(X,Loc,T)}2, time(T), num(N), load(ferry,N,T).

%If two cars unboard the ferry at time t, the number of cars in the ferry decrements by 2
load(ferry,N-2,T+1) :- 2{car(X) : car(X), location(Loc), unboard(X,Loc,T)}2, time(T), num(N), load(ferry,N,T).

%If a car boards the ferry at time T, the number of cars in the ferry increments by 1 at the next time step
load(ferry,N+1,T+1) :-  1{car(X) : car(X), location(Loc), board(X,Loc,T)}1, 0{car(X) : car(X), location(Loc), unboard(X,Loc,T)}0, time(T), num(N), load(ferry,N,T).

%If a car unboards the ferry at Time T, the number of cars in the ferry decrements by 1 at the next time step
load(ferry,N-1,T+1) :- 1{car(X) : car(X), location(Loc), unboard(X,Loc,T)}1, 0{car(X) : car(X), location(Loc), board(X,Loc,T)}0, time(T), num(N), load(ferry,N,T).

%If a car unboards the ferry at Time T and another boards, the number of cars in the ferry remains the same for the next time step
load(ferry,N,T+1) :- 1{car(X) : car(X), location(Loc), unboard(X,Loc,T)}1, 1{car(X) : car(X), location(Loc), board(X,Loc,T)}1, time(T), num(N), load(ferry,N,T).

%FRAME SIGNALS
%If the car unboards from the ferry, it has been affected
affected0(Car,T) :- time(T), car(Car), location(Loc), unboard(Car,Loc,T).

%If a ferry moves from its location at time T it is now moving
moving(ferry,From,T):-  location(From),location(Loc), time(T), at(ferry,From,T),
	move(ferry,From,Loc,T).


%FRAME AXIOMS
%If a car is at a location and does not board it remains at that location
at(Car,Loc,T+1):- car(Car), location(Loc), time(T), at(Car,Loc,T), not board(Car,Loc,T).

%If a ferry is at a location at time T, and is not moving, then it stays there at time T + 1
at(ferry,Loc,T+1):- location(Loc), time(T), at(ferry,Loc,T), not moving(ferry,Loc,T).

%If a ferry is at a location and a car unboards at that location, the ferry is still there at the next time step
at(ferry,Loc,T+1):- car(Car), location(Loc), time(T), at(ferry,Loc,T), unboard(Car,Loc,T).

%If the ferry is at a location at time T, and a car boards, the ferry is still at the location at the next time step
at(ferry,Loc,T+1):- car(Car), location(Loc), time(T), at(ferry,Loc,T), board(Car,Loc,T).

%If a car is in the ferry, and does not unboard, it is still in the ferry at the next time step
in(ferry,Car,T+1):- car(Car), time(T), in(ferry,Car,T), not affected0(Car,T).

%If there is no load change at time T, the load is the same at time T + 1
load(ferry,N,T+1) :-  0{car(X) : car(X), location(Loc), unboard(X,Loc,T)}0, 0{car(X) : car(X), location(Loc), board(X,Loc,T)}0, time(T), num(N), load(ferry,N,T).


%CONSTRAINTS
%The ferry cannot move to 2 different locations at the same time
:- time(T),location(X),location(Y),X!=Y,
   move(ferry,Loc,X,T), move(ferry,Loc,Y,T).

%Only 2 cars can board/unboard the ferry at the same time
:- time(T), location(Loc), car(X), car(Y), car(Z), X!=Y,  X!=Z, Y!=Z, board(X,Loc,T), board(Y,Loc,T), board(Z,Loc,T).
:- time(T), location(Loc), car(X), car(Y), car(Z), X!=Y,  X!=Z, Y!=Z, unboard(X,Loc,T), board(Y,Loc,T), board(Z,Loc,T).
:- time(T), location(Loc), car(X), car(Y), car(Z), X!=Y,  X!=Z, Y!=Z, unboard(X,Loc,T), unboard(Y,Loc,T), board(Z,Loc,T).

%Only 2 cars can be in the ferry at the same time
:- time(T), car(X), car(Y), car(Z), X!=Y,  X!=Z, Y!=Z, in(ferry,X,T), in(ferry,Y,T), in(ferry,Z,T).

%GOAL
goal(T+1):-  time(T), goal(T).
goal :- time(T), goal(T).
:- not goal.
